var SupplyChain = artifacts.require('ProductManagement')

// const truffleAssert = require('truffle-assertions');

contract('ProductManagement', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    var vin = 1
    const ownerID = accounts[0]
    const partManufacturerID = accounts[0];
    const carManufacturerID = accounts[1];
    const DealershipID = accounts[2]
    var partID = sku + upc
    var partState = 0
    var carState = 0
    var carName = "Maruti 800"
    var wheel = 0
    var body = 1
    var engine = 2
    var transmission = 3
    
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Part Manufacturer: accounts[0] ", accounts[0])
    console.log("Car Manufacturer: accounts[1] ", accounts[1])
    console.log("Dealership: accounts[2] ", accounts[2])

    // 1st Test

    it("Testing smart contract function processPart() by manufacturing wheel part", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
       
        await supplyChain.processPart(upc, partManufacturerID, wheel,{from: partManufacturerID});
        
        // Mark an item as Processed by calling function processItem()

        const resultBufferOne = await supplyChain.fetchPart.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], partManufacturerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], partManufacturerID, 'Error: Missing or Invalid ManufacturerID');
        assert.equal(resultBufferOne[4], partID, 'Error: Missing or Invalid part ID');
        assert.equal(resultBufferOne[5], wheel, 'Error: Invalid part type');
        
    })    

    // 2nd Test
    it("Testing smart contract function manufacturePart() part factory to manufacture a processed part", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted=false
        

        // Watch the emitted event Manufactured()
        // supplyChain.Manufactured({},(err,res) => {
        //     eventEmitted = true
        // })

        await supplyChain.manufacturePart(upc,{from: partManufacturerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchPart.call(upc)

        // Verify the result set
        assert.equal(resultBuffer[6], 1, 'Error: Invalid part State');
        // assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 3rd Test
    it("Testing smart contract function processCar() that allows a car factory to process car", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        
        await supplyChain.processCar(carManufacturerID,carName,{from:partManufacturerID})

        // Retrieve the just now saved item from blockchain by calling function fetchCar()
        const resultBuffer = await supplyChain.fetchCar.call(upc)


        // Verify the result set
        assert.equal(resultBuffer[0], carManufacturerID, 'Error: Invalid car ownership');
        assert.equal(resultBuffer[3], carName, 'Error: Invalid car model name');
        assert.equal(resultBuffer[4], 0, 'Error: Invalid Car State');
    })    

    // 4th Test
    it("Testing smart contract function manufactureCar() which allows car factory to manufacture a car from parts", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        await supplyChain.processPart(upc, partManufacturerID, wheel,{from: partManufacturerID});
        await supplyChain.manufacturePart(upc++,{from: partManufacturerID})

        await supplyChain.processPart(upc, partManufacturerID, body,{from: partManufacturerID});
        await supplyChain.manufacturePart(upc++,{from: partManufacturerID})

        await supplyChain.processPart(upc, partManufacturerID, engine,{from: partManufacturerID});
        await supplyChain.manufacturePart(upc++,{from: partManufacturerID})

        await supplyChain.processPart(upc, partManufacturerID, transmission,{from: partManufacturerID});
        await supplyChain.manufacturePart(upc++,{from: partManufacturerID})

        await supplyChain.processCar(carManufacturerID,carName,{from:partManufacturerID})

        await supplyChain.manufactureCar( upc-4,upc-3,upc-2,upc-1, {from: carManufacturerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchCar.call(vin);
     
        // Verify the result set
        assert.equal(resultBuffer[0], carManufacturerID, 'Error: Invalid car owner');
        assert.equal(resultBuffer[1], carManufacturerID, 'Error: Invalid car manufacturer');
        assert.equal(resultBuffer[2], vin, 'Error: Invalid Vin');
        assert.equal(resultBuffer[3], carName, 'Error: Invalid car Name');
        assert.equal(resultBuffer[4], 1, 'Error: Invalid car state');

    });

    // 5th Test
    it("Testing smart contract function shipItem() that allows a car factor to ship the item to dealership", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        // Mark a car as Sold by calling function shipItem()
        await supplyChain.shipCar(vin, DealershipID, {from: carManufacturerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchCar.call(vin);

        // Verify the result set
        assert.equal(resultBuffer[4], 2, 'Error: Invalid car State');
        assert.equal(resultBuffer[0], DealershipID, 'Invalid Car owner');
    });


});

